generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(cuid())
  email        String          @unique
  name         String?
  image        String?
  createdAt    DateTime        @default(now())
  preferences  Preference?
  plans        Plan[]
  favorites    FavoritePlace[]
  accounts     Account[]
  sessions     Session[]
}

model Preference {
  id          String   @id @default(cuid())
  userId      String   @unique
  categories  String[]
  maxDistance Int
  minRating   Float
  priceLevels Int[]
  budgetDaily Int?
  locale      String
  theme       String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Plan {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  blocks    Block[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date], name: "plan_user_date_idx")
  @@unique([userId, date])
}

model Block {
  id          String   @id @default(cuid())
  planId      String
  title       String
  notes       String?
  start       DateTime
  durationMin Int
  lat         Float?
  lng         Float?
  placeRef    String?
  plan        Plan     @relation(fields: [planId], references: [id])

  @@index([planId, start], name: "block_plan_start_idx")
}

model FavoritePlace {
  id        String   @id @default(cuid())
  userId    String
  placeRef  String
  name      String
  lat       Float
  lng       Float
  metaJson  Json
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, placeRef], name: "favorite_user_ref_idx")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  oauth_token_secret String?
  oauth_token         String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
